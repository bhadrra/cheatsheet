use rand::Rng;
let mut rng =rand::thread_rng();
let j=rng.gen_range(0,N);


use std::time::{Duration, SystemTime};
let sy_time = SystemTime::now();
println!("{:?}", sy_time.elapsed().unwrap().as_millis() );

//环境变量
&env::var( "OMP_NUM_THREADS" ).unwrap();
let home=env!("HOME");

if let Some(ref p) = self.path {}
          
//全局变量
static mut THE_SERIAL_PORT: SerialPort = SerialPort;
fn main() {
    let _ = unsafe {
        THE_SERIAL_PORT.read_speed();
    };
}

for ch in 'a'..='z' {
  print!("{}",ch);
}

# iterator on string
for c in my_str.chars() {
    // do something with `c`
}

println!("{:#x?}", region);  //最佳写法 http://dtrace.org/blogs/bmc/2020/10/11/rust-after-the-honeymoon/
println!("{}", 1); // 默认用法,打印Display
println!("{:o}", 9); // 八进制
println!("{:x}", 255); // 十六进制 小写
println!("{:X}", 255); // 十六进制 大写
println!("{:p}", &0); // 指针
println!("{:b}", 15); // 二进制
println!("{:e}", 10000f32); // 科学计数(小写)
println!("{:E}", 10000f32); // 科学计数(大写)
println!("{:?}", "test"); // 打印Debug
println!("{:#?}", ("test1", "test2")); // 带换行和缩进的Debug打印
println!("{a} {b} {b}", a = "x", b = "y"); // 命名参数

format!("{}{}","hello","world")

# 打印长数组
let a = [0; 33];
println!("{:?}", &a[..]);

if let Some([b'@', filename @ ..]) = Some(b"@abc123") {
  println!("filename {:?}", filename);
}

# concat vector
let concatenated = [&first[..], &second[..]].concat();

#做参数时,用&[u8]好于&Vec<u8>
Vec<u8> to [u8]  Vec<u8>.as_slice()


#[inline]
#[inline(always)]

export RUST_LOG=info

let range = 0..100;
let a = repeat(3);
range.zip(a).flat_map(|(i, j)| {
  once(i).chain(once(j))
})

(0..).take(10).filter(|x|x%2==0)

pub fn max_coins(piles: Vec<i32>) -> i32 {
    let mut pp=piles.clone();
    pp.sort();
    let l=2*(pp.len()/3);
    let mut it=pp.into_iter().rev().take(l);
    it.next();

    let mut sum:i32=0;

    loop{
        match it.next(){
            Some(x)=>{
                sum+=x;
                it.next();
            }
            None=>{
                return sum;
            }
        }
    }
}

let mut floats = [5f64, 4.0, 1.0, 3.0, 2.0];
floats.sort_by(|a, b| a.partial_cmp(b).unwrap());
assert_eq!(floats, [1.0, 2.0, 3.0, 4.0, 5.0]);

let (tx1, rx1) = channel::<String>();
let (tx1, rx1) = channel::<u32>();

可以只有clone,没有copy

Rust         | Cpp              |                      
=============|==================|=====================|=======================
a:&T         | const T* const a | 都不能修改          | 不可变引用的不可变绑定
mut a:&T     | const T* a       | 不能修改a指向的内容 | 不可变引用的可变绑定
a:&mut T     | T* const a       | 不能修改a           | 可变引用的不可变绑定
mut a:&mut T | T*a              | 都能修改            | 可变引用的可变绑定

# 保证这个函数相同的参数,返回的结果都一样
# 带有一定的合同性质
const fn # 和cpp的constexpr一样
         # cpp的consteval强制编译时求值,rust中没有这样的东西

str一定能转[u8]
str是utf8编码的字节序列
[u8]不一定能转str

&str才是核心.
str本身没有用处

# 替换全局的allocator
#[global_allocator]
static GLOBAL: System = System;

impl Deref for ReadOnlySource {
  type Target = [u8];

  fn deref(&self) -> &[u8] {
      self.as_slice()
  }
}

GAT(generic Associated Types)
在iterator中,塞带生命周期的参数

fn twich(f:fn(i32)->i32)->Box<dyn Fn(i32)->i32>{
  Box::new(move |a|f(f(a)))
}

fn double(args:i32)->i32{ args*2}

fn main(){
  let g=twich(double);
  println!("{}",g(2));
}


Weak 与 Rc类似,是可以共享的
Weak在deallocation时候不发挥作用

[cfg(not(target_pointer_width = "64"))]

enum F{
    A=1,
    B=2
}
let x=F::A as usize;
println!("{}",x);


# 获取地址
{
  let x = &42;
  let y = format!("{:p}", x);
  let address = y.trim_start_matches("0x");
  let z = u64::from_str_radix(&address, 16);
  println!("{:?}", z);
}

{
  let address = &42 as *const i32;
  println!("{:?}", address);
}
#[macro_export]
macro_rules! getAddress {
($a:expr) => {{
let y = format!("{:p}", $a);
let address = y.trim_start_matches("0x");
let z: u64 = u64::from_str_radix(&address, 16).unwrap();
z
}};
}

// 不好的写法
// 因为会先分配到栈上
Box::new([0;10_000_000]) 
// 好的写法
// 会直接分配到堆上
box[0;10_000_000] 

// no bound check
// use simd
fn loop_fast(a:&mut [i32]){
  let a=&mut a[..1000];
  for i in 0..1000{
    a[i]=0;
  }
}

//static 的例子
struct S {
    a: &'static [u8],
}
let s = S { a: &[][..] };

trait A {
    fn get(&mut self, name: &str) -> &mut Vec<i32>;
}

struct B(HashMap<String, Vec<i32>>);

impl A for B {
   fn get(&mut self, name: &str) -> &mut Vec<i32> {
        if self.0.contains_key(name) {
            return match self.0.get_mut(name) {
                Some(items) => items,
                None => unreachable!(),
            };
        }
        self.0.entry(name.to_string()).or_default()
    }
}

let b:Rc<str>="hello".into();

#![deny(clippy::all)]
#![deny(clippy::pedantic)]
#![deny(clippy::restriction)]
打开clippy的所有lint

