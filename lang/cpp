#include <bits/stdc++.h>

#include<limits.h>
int a=INT_MIN

//priority_queue默认是最大值在前面
//最小堆
priority_queue<int, vector<int>, greater<int> > q;

//字符串匹配
s1.find(s2) != std::string::npos

//unique
std::vector<int> v{1,2,1,1,3,3,3,4,5,4};
auto last = std::unique(v.begin(), v.end());
// v now holds {1 2 1 3 4 5 4 x x x}, where 'x' is indeterminate
v.erase(last, v.end());

// subset of binary
for (int cs = (a - 1) & a; cs; cs = (cs - 1) & a) {
  cout<<cs<<endl;
}

lower_bound
upper_bound
默认数组从小到大排序。如果是从大到小排序，需要加个参数
左开右闭。右边一般是 v.end() 这种访问不了的地方
如果返回右区间，表明没有查询到
使用的时候，想想好是不是一定能找的到。如果一定能找的到，那也不用额外判断了

# 在单调递增序列中，x的个数
upper_bound(a,a+n,x)-lower_bound(a,a+n,x)

# delete one item
multiset.erase(multiset.find(1));

# delete all items
multiset.erase(1);

multiset 可重复的二叉树,快速访问最小值和最大值

# 最小值
multiset.begin()
# 最大值
multiset.rbegin()


std::sort(v.begin(), v.end(), [](int a,int b){return (a % 10) > (b % 10);}); 
可能你还不太会使用 Lambda，基本形式如下：[](argument1,argument2,.....){//code}
在 () 中传入参数，在 {} 中编写代码，[] 是一个捕获列表，可以指定外部作用域中，可以使用的局部变量：
[] — 捕获列表为空，表示在 lambda 表达式中不能使用任何外部作用域的局部变量，只能使用传进去的参数。
[=] — 表示按照值传递的方法捕获父作用域的所有变量。
[&] — 表示按照引用传递的方法捕获父作用域的所有变量。
[this] — 在成员函数中，按照值传递的方法捕获 this 指针。
[a, &b] — 不建议直接使用 [=] 或 [&] 捕获所有变量，可以按需显式捕获，就是在 [] 指定变量名，[a] 表示值传递，[&b] 表示引用传递。

int mi = std::min({x1, x2, x3, x4})

set,map: 红黑树
unordered_map: hash table
所以set和map的key可以是vector
而unordered_map的key不能是vector

//ok
set<vector<int> > s;
map<vector<int>,int> mp;

//error
unordered_map<vector<int>,int> mp;

memcpy,memmove
在遇到src和dest重叠的情况下，memcpy不能保证正确性，memmove可以保证正确性


// priority_queue 自定义方法1
struct Node{
    int x, y;
    Node(int a=0, int b=0):
        x(a),y(b){}
};
bool operator<(Node a, Node b){//返回true时，说明a的优先级低于b
    //x值较大的Node优先级低（x小的Node排在队前）
    //x相等时，y大的优先级低（y小的Node排在队前）
    if( a.x== b.x ) return a.y> b.y;
    return a.x> b.x;
}
priority_queue<Node> pq;

// priority_queue 自定义方法2
auto comp=[](ListNode *a, ListNode *b) {return a->vl > b->val;};
priority_queue<ListNode*, vector<ListNode*>, decltype(comp)> q(comp);

string s="1 2 3";
stringsteam ss(s);
string temp;
while(ss>>temp){
  cout<<temp<<endl;
}

std::cout.precision(1);
cout<< std::fixed;
cout<<hdp[0][0][0]<<" "<<tdp[0][0][0]<<endl;

cout<<hex<<42<<endl;        // 输出 16 进制
cout<<oct<<42<<endl;        // 输出 8 进制

for (auto [v, w] : adj[u]) {}

LONG_MAX, LLONG_MAX

# 字符串大小写转换
transform(s.begin(),s.end(),s.begin(),std::towupper);
transform(s.begin(),s.end(),s.begin(),std::towlower);

yocto 	std::ratio<1, 1000000000000000000000000>, if std::intmax_t can represent the denominator
zepto 	std::ratio<1, 1000000000000000000000>, if std::intmax_t can represent the denominator
atto 	std::ratio<1, 1000000000000000000>
femto 	std::ratio<1, 1000000000000000>
pico 	std::ratio<1, 1000000000000>
nano 	std::ratio<1, 1000000000>
micro(微) 	std::ratio<1, 1000000>
milli(毫) 	std::ratio<1, 1000>
centi 	std::ratio<1, 100>
deci 	std::ratio<1, 10>
deca 	std::ratio<10, 1>
hecto 	std::ratio<100, 1>
kilo 	std::ratio<1000, 1>
mega 	std::ratio<1000000, 1>
giga 	std::ratio<1000000000, 1>
tera 	std::ratio<1000000000000, 1>
peta 	std::ratio<1000000000000000, 1>
exa 	std::ratio<1000000000000000000, 1>
zetta 	std::ratio<1000000000000000000000, 1>, if std::intmax_t can represent the numerator
yotta 	std::ratio<1000000000000000000000000, 1>, if std::intmax_t can represent the numerator

毫秒 ms
微秒 μs
纳秒 ns

