# cargo build
cargo b  
cargo b  --examples

cargo run --example jiqian

cargo doc --open

# 下载一个crate的源码
cargo clone xxx

# 生成依赖图
cargo tree
# 显示每个依赖的features
cargo tree -e features

# 依赖图,用graphviz画的
cargo deps | dot -Tpng > graph.png

# 下载所有的依赖到本地,不用每次联网同步
cargo vendor

# check
cargo clippy
cargo clippy -V

# expand macro
cargo expand

cargo install --path .

# call me when finished
cargo build --release && \
	echo Back to work | espeak

# view expand macro
cargo expand
rustc -Z unstable-options --pretty=expanded temp.rs

# test的output
cargo test -- --nocapture

# view desugared code
# cargo-inspect
rustc +nightly -Zunpretty=hir main.rs
cargo rustc -- -Z unpretty=hir-tree

# `llvm-bc`, `asm`, `llvm-ir`, `mir`, `obj`, `metadata`, `link`, `dep-info`
rustc --emit mir foo.rs
cargo rustc -- --emit mir
ls target/release/deps/<crate_name>-<hash>.mir

RUSTFLAGS="--emit asm" cargo build

# 生成mir对应的.dot 文件
# 然后转成图片看
cargo rustc --release  -- -Z dump-mir=all -Z dump-mir-dataflow

# 内存泄露分析
cargo miri test

rustc --print target-list

# 更好的borrow check
cargo  rustc  -- -Zpolonius

# polonius 里测试的生成方法
rustc -Znll-facts -Zpolonius issue-47680.rs

